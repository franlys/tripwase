generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  trips         Trip[]
  favorites     Favorite[]
  notifications Notification[]
  preferences   UserPreferences?

  @@map("users")
}

model UserPreferences {
  id           String   @id @default(cuid())
  userId       String   @unique
  currency     String   @default("USD")
  language     String   @default("ES")
  notifications Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Destination {
  id              String   @id @default(cuid())
  name            String
  country         String
  description     String?
  averagePrice    Float?
  popularityScore Int      @default(0)
  categories      String   @default("[]")
  imageUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  averageTemp  Float?
  climate      String?
  bestMonths   String   @default("[]")

  trips     Trip[]
  favorites Favorite[]

  @@unique([name, country])
  @@map("destinations")
}

model Trip {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?
  status      String  @default("PLANNING")
  isArchived  Boolean @default(false)
  
  destinationId String
  
  originCity    String
  originCountry String
  
  startDate DateTime
  endDate   DateTime
  duration  Int
  
  totalCost     Float
  budgetTotal   Float
  budgetUsed    Float  @default(0)
  budgetRemaining Float?
  currency      String @default("USD")
  
  adultsCount   Int @default(1)
  childrenCount Int @default(0)
  
  interests    String @default("[]")
  travelStyle  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination Destination @relation(fields: [destinationId], references: [id])
  dayPlans    DayPlan[]
  expenses    Expense[]

  @@map("trips")
}

model DayPlan {
  id     String @id @default(cuid())
  tripId String
  day    Int
  date   DateTime
  
  activities String @default("[]")
  
  estimatedCost Float?
  actualCost    Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  
  @@unique([tripId, day])
  @@map("day_plans")
}

model Expense {
  id          String   @id @default(cuid())
  tripId      String
  category    String   @default("OTHER")
  amount      Float
  currency    String   @default("USD")
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Favorite {
  id            String   @id @default(cuid())
  userId        String
  destinationId String
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@unique([userId, destinationId])
  @@map("favorites")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   @default("INFO")
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}