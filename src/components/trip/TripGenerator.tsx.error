// src/components/trip/TripGenerator.tsx
import React, { useState } from 'react';
import { ArrowLeft, MapPin, Calendar, Users, DollarSign, Globe } from 'lucide-react';
import { OriginModal, FreeMapModal } from '../modals';
import { generateThreePlans, SimplePlan, PlanInput } from '../../utils/multiplePlanGenerator';

interface TripGeneratorProps {
  onBackToExplore: () => void;
  onShowPlans: (plans: SimplePlan[]) => void;
}

const TripGenerator: React.FC<TripGeneratorProps> = ({ onBackToExplore, onShowPlans }) => {
  const [formData, setFormData] = useState({
    destination: '',
    startDate: '',
    endDate: '',
    travelers: 2,
    budget: 2000,
    currency: 'EUR',
    interests: [] as string[]
  });

  const [origin, setOrigin] = useState<{ country: string; city: string } | null>(null);
  const [showOriginModal, setShowOriginModal] = useState(true);
  const [showMap, setShowMap] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  const destinationOptions = [
    'España', 'Francia', 'Italia', 'Alemania', 'Reino Unido',
    'Estados Unidos', 'Japón', 'Tailandia', 'México', 'Brasil'
  ];

  const interestOptions = [
    'Historia', 'Arte', 'Gastronomía', 'Naturaleza', 'Aventura',
    'Playas', 'Museos', 'Arquitectura', 'Vida nocturna', 'Compras'
  ];

  const handleOriginConfirm = (originData: any) => {
    setOrigin({
      country: originData.country || 'España',
      city: originData.city || 'Madrid'
    });
    setShowOriginModal(false);
  };

  const handleLocationSelect = (locationName: string, coordinates: any) => {
    setFormData(prev => ({ ...prev, destination: locationName }));
    setShowMap(false);
  };

  const handleInterestToggle = (interest: string) => {
    setFormData(prev => ({
      ...prev,
      interests: prev.interests.includes(interest)
        ? prev.interests.filter(i => i !== interest)
        : [...prev.interests, interest]
    }));
  };

  const handleGeneratePlans = async () => {
    if (!origin || !formData.destination || !formData.startDate || !formData.endDate) {
      alert('Por favor completa todos los campos requeridos');
      return;
    }

    setIsGenerating(true);

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));

      const planInput: PlanInput = {
        destination: formData.destination,
        origin: ${origin.city}, ,
        startDate: formData.startDate,
        endDate: formData.endDate,
        travelers: formData.travelers,
        budget: formData.budget,
        currency: formData.currency,
        interests: formData.interests
      };

      const plans = generateThreePlans(planInput);
      onShowPlans(plans);

    } catch (error) {
      console.error('Error generando planes:', error);
      alert('Error al generar los planes. Por favor intenta de nuevo.');
    } finally {
      setIsGenerating(false);
    }
  };

  const isFormValid = origin && formData.destination && formData.startDate && formData.endDate;

  return (
    <div className="planner-layout">
      {/* Header profesional del planificador */}
      <div className="planner-header">
        <div className="max-w-4xl mx-auto">
          <button 
            onClick={onBackToExplore} 
            className="btn-secondary mb-6 inline-flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver a Explorar
          </button>
          <h1 className="planner-title">
            Planificador de Viajes Inteligente
          </h1>
          <p className="planner-subtitle">
            Generaremos 3 opciones personalizadas para tu viaje perfecto
          </p>
        </div>
      </div>

      {/* Formulario principal */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="form-container">
          
          {/* Origen y Destino */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="form-label">
                <MapPin className="w-4 h-4 text-blue-600" />
                Origen
              </label>
              <div className="p-4 bg-gray-50 rounded-xl border-2 border-gray-200 font-medium text-gray-700">
                {origin ? ${origin.city},  : 'Seleccionando...'}
              </div>
            </div>

            <div>
              <label className="form-label">
                <Globe className="w-4 h-4 text-green-600" />
                Destino
              </label>
              <div className="relative">
                <select
                  value={formData.destination}
                  onChange={(e) => setFormData(prev => ({ ...prev, destination: e.target.value }))}
                  disabled={!origin}
                  className="form-input pr-12 cursor-pointer"
                >
                  <option value="">Seleccionar destino</option>
                  {destinationOptions.map(dest => (
                    <option key={dest} value={dest}>{dest}</option>
                  ))}
                </select>
                <button
                  type="button"
                  onClick={() => setShowMap(true)}
                  disabled={!origin}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-blue-600 hover:text-blue-800 transition-colors disabled:opacity-50"
                  title="Buscar en mapa"
                >
                  <Globe className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>

          {/* Fechas */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="form-label">
                <Calendar className="w-4 h-4 text-green-600" />
                Fecha de inicio
              </label>
              <input
                type="date"
                value={formData.startDate}
                onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}
                disabled={!origin}
                className="form-input"
              />
            </div>

            <div>
              <label className="form-label">
                <Calendar className="w-4 h-4 text-red-600" />
                Fecha de fin
              </label>
              <input
                type="date"
                value={formData.endDate}
                onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}
                disabled={!origin}
                className="form-input"
              />
            </div>
          </div>

          {/* Viajeros y Presupuesto */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="form-label">
                <Users className="w-4 h-4 text-purple-600" />
                Viajeros
              </label>
              <input
                type="number"
                min="1"
                max="10"
                value={formData.travelers}
                onChange={(e) => setFormData(prev => ({ ...prev, travelers: parseInt(e.target.value) || 1 }))}
                disabled={!origin}
                className="form-input"
              />
            </div>

            <div>
              <label className="form-label">
                <DollarSign className="w-4 h-4 text-yellow-600" />
                Presupuesto base
              </label>
              <div className="flex gap-3">
                <input
                  type="number"
                  min="500"
                  value={formData.budget}
                  onChange={(e) => setFormData(prev => ({ ...prev, budget: parseInt(e.target.value) || 500 }))}
                  disabled={!origin}
                  className="form-input flex-1"
                />
                <select
                  value={formData.currency}
                  onChange={(e) => setFormData(prev => ({ ...prev, currency: e.target.value }))}
                  disabled={!origin}
                  className="form-input w-24"
                >
                  <option value="EUR">EUR</option>
                  <option value="USD">USD</option>
                  <option value="DOP">DOP</option>
                  <option value="GBP">GBP</option>
                </select>
              </div>
            </div>
          </div>

          {/* Intereses */}
          <div className="mb-8">
            <label className="form-label mb-4">
              Intereses (opcional)
            </label>
            <div className="flex flex-wrap gap-3">
              {interestOptions.map(interest => {
                const isSelected = formData.interests.includes(interest);
                return (
                  <button
                    key={interest}
                    type="button"
                    onClick={() => handleInterestToggle(interest)}
                    disabled={!origin}
                    className={px-4 py-2 rounded-xl border-2 font-medium text-sm transition-all  disabled:opacity-50 disabled:cursor-not-allowed}
                  >
                    {interest}
                  </button>
                );
              })}
            </div>
          </div>

          {/* Botón de generación */}
          <button
            onClick={handleGeneratePlans}
            disabled={!isFormValid || isGenerating}
            className={w-full py-4 px-8 rounded-2xl font-bold text-lg transition-all duration-300 }
          >
            {isGenerating ? (
              <div className="flex items-center justify-center gap-3">
                <div className="loading-spinner"></div>
                Generando planes increíbles...
              </div>
            ) : (
              'Generar 3 Opciones de Viaje'
            )}
          </button>

          {!isFormValid && (
            <p className="text-center text-gray-500 text-sm mt-4">
              Completa todos los campos para generar tus planes personalizados
            </p>
          )}
        </div>
      </div>

      {/* Modales */}
      <OriginModal
        isOpen={showOriginModal}
        onConfirm={handleOriginConfirm}
      />

      <FreeMapModal
        isOpen={showMap}
        onClose={() => setShowMap(false)}
        onLocationSelect={handleLocationSelect}
      />
    </div>
  );
};

export default TripGenerator;
